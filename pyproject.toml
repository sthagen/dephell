
# Default section.
# Convert dephell metainfo and dependencies from poetry to setup.py:
# $ dephell deps convert
[tool.dephell.main]
# read from poetry format
from = {format = "poetry", path = "pyproject.toml"}
# and convert into setup.py
to = {format = "setuppy", path = "setup.py"}

# explicitly specify your versioning scheme to let your users know what they can expect
versioning = "semver"
# git tag template for releases
tag = "v."

# Make lockfile
# $ dephell deps convert --env=lock
[tool.dephell.lock]
from = {format = "poetry", path = "pyproject.toml"}
to = {format = "poetrylock", path = "poetry.lock"}

# Install flake8 with plugin in the separated venv and run it:
# $ dephell venv create --env=flake8
# $ dephell deps install --env=flake8
# $ dephell venv run --env=flake8
[tool.dephell.flake8]
# read requirements file
from = {format = "pip", path = "requirements-flake.txt"}
# run this command
command = "flake8"

[tool.dephell.typing]
from = {format = "poetry", path = "pyproject.toml"}
# mypy isn't specified in dependencies,
# but `dephell venv run` command will install it automatically
command = "mypy --ignore-missing-imports --allow-redefinition dephell"

# Test project package in the separated venv:
# $ dephell project test --env=pytest
[tool.dephell.pytest]
# read dependencies from poetry format
from = {format = "poetry", path = "pyproject.toml"}
# install dependencies from `dependencies` section and `tests` extra
envs = ["main", "full", "tests"]
# copy files that requred for tests
tests = ["tests", "README.md"]
# run command `pytest`
command = "python -m pytest tests/"

[tool.dephell.pypy]
from = {format = "poetry", path = "pyproject.toml"}
# force python interpreter for env
python = "pypy3"
envs = ["main", "full", "tests"]
command = "pytest -x tests/"

# Install `docs` extra dependencies  in the separated venv and run sphinx:
# $ dephell venv create --env=docs
# $ dephell deps install --env=docs
# $ dephell venv run --env=docs
[tool.dephell.docs]
# read dependencies from poetry format
from = {format = "poetry", path = "pyproject.toml"}
# install only `docs` extra dependencies
envs = ["docs"]
# run this command:
command = "sphinx-build -W docs docs/build"

# Sort imports in the project:
[tool.dephell.isort]
from = {format = "poetry", path = "pyproject.toml"}
envs = ["main", "full", "dev"]
command = "isort -y"

[tool.dephell.vendorized]
from = {format = "poetry", path = "pyproject.toml"}
to = {format = "wheel", path = "dist-vendored/"}
envs = ["main"]

# Make vendorized version of the project:
# dephell vendor download --env=vendorized
# dephell vendor import --env=vendorized
[tool.dephell.vendorized.vendor]
path = "dephell_vendor"
exclude = ["jinja2", "test", "setuptools", "pip"]


# -- ISORT -- #

[tool.isort]
skip = "tests/requirements"
line_length = 120
combine_as_imports = true
balanced_wrapping = true
lines_after_imports = 2
not_skip = "__init__.py"
multi_line_output = 5

import_heading_stdlib = "built-in"
import_heading_thirdparty = "external"
import_heading_firstparty = "project"
import_heading_localfolder = "app"

# -- POETRY -- #

[tool.poetry]
name = "dephell"
version = "0.8.3"
authors = ["Gram <master_fess@mail.ru>"]
description = "Dependency resolution for Python"
readme = "README.md"
license = "MIT"
homepage = "https://dephell.org/"
repository = "https://github.com/dephell/dephell"
documentation = "https://dephell.org/docs/"
keywords = [
    "dephell", "packaging", "dependency", "dependencies", "venv", "licenses",
    "pip", "poetry", "pipfile", "pipenv", "setuptools",
]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Framework :: Setuptools Plugin",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Topic :: Security",  # because we lock dependencies with hashes :)
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.scripts]
dephell = "dephell.cli:entrypoint"

[tool.poetry.dependencies]
python = ">=3.6"
aiohttp = "*"
attrs = ">=19.2.0"
cerberus = ">=1.3"
jinja2 = "*"
m2r = "*"
packaging = "*"
pip = ">=18.0,<=19.3.1"
requests = "*"
tomlkit = "*"
yaspin = "*"
certifi = "*"

# lazy
appdirs = {optional = true, version = "*"}
bowler = {optional = true, version = "*"}
docker = {optional = true, version = "*"}
dockerpty = {optional = true, version = "*"}
fissix = {optional = true, allows-prereleases = true, version = "*"}
graphviz = {optional = true, version = "*"}
html5lib = {optional = true, version = "*"}
python-gnupg = {optional = true, version = "*"}
pygments = {optional = true, version = "*"}
"ruamel.yaml" = {optional = true, version = "*"}
tabulate = {optional = true, version = "*"}

# optional
aiofiles = {optional = true, version = "*"}
autopep8 = {optional = true, version = "*"}
colorama = {optional = true, version = "*"}
yapf = {optional = true, version = "*"}

# dephell ecosystem
dephell-archive = ">=0.1.5"
dephell-argparse = ">=0.1.1"
dephell-changelogs = "*"
dephell-discover = ">=0.2.6"
dephell-licenses = ">=0.1.6"
dephell-links = ">=0.1.4"
dephell-markers = ">=1.0.0"
dephell-pythons = ">=0.1.11"
dephell-setuptools = ">=0.2.1"
dephell-shells = ">=0.1.3"
dephell-specifier = ">=0.1.7"
dephell-venvs = ">=0.1.16"
dephell-versioning = "*"

[tool.poetry.dev-dependencies]
pytest = "*"
requests-mock = "*"
aioresponses = "*"

alabaster = "*"
sphinx = "*"
recommonmark = "*"
pygments-github-lexers = "*"

flake8-isort = "*"
isort = {extras = ["pyproject"], version = "*"}
# pre-commit = "*"

[tool.poetry.extras]
docs = ["alabaster", "pygments-github-lexers", "recommonmark", "sphinx"]
tests = ["aioresponses", "pytest", "requests-mock"]
full = ["aiofiles", "appdirs", "autopep8", "bowler", "colorama", "docker", "dockerpty", "fissix", "graphviz", "html5lib", "pygments", "python-gnupg", "tabulate", "yapf"]
